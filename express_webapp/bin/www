/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-webapp:server');
var http = require('http');
var Websocket = require('ws');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,() => console.log('Listening on port : 3000'));
server.on('error', onError);
server.on('listening', onListening);

const wssEleve = new Websocket.Server({ port: 3001 });
const wssProfesseur = new Websocket.Server({ port: 3002 });

var eleves = {}; // tableau global pour stocker les informations des élèves
let equipes = {}; // tableau global pour stocker les équipes
let classement = {};
let resultat_eleve={}

wssEleve.on('connection', function connection(ws) {
  console.log('Connection eleve');
  ws.send('Bienvenue nouveau client');

  // Gérer les messages reçus
  ws.on('message', function incoming(message) {
    try {
      var data = JSON.parse(message);
       
      if(data.type == 'info_eleve'){
        var eleve = data.data;
        var session = data.session;
        // Vérifier si la session existe dans l'objet eleves_par_session
        if (!eleves.hasOwnProperty(session)) {
          eleves[session] = []; // Initialiser un tableau vide pour la session
        }

        //checker si l'eleve existe deja
        var existe = false;
        for(var i = 0; i < eleves[session].length; i++){
          if(eleves[session][i].nom == eleve.nom && eleves[session][i].prenom == eleve.prenom && eleves[session][i].classe == eleve.classe){
            existe = true;
          }
        }
        if(!existe){
          // Ajouter l'élève au tableau correspondant à sa session
          eleves[session].push(eleve);
        }

        //envoie les données a tous les clients
        wssEleve.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'eleves',
              session:session,
              data: eleves[session]
            };
            client.send(JSON.stringify(message));
          }
        });
        wssProfesseur.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'eleves',
              session:session,
              data: eleves[session]
            };
            client.send(JSON.stringify(message));
          }
        });
        console.log('Données stockées:');
        console.log(eleves[session]);
      }
      else if(data.type == 'resultat_eleve'){
        var session = data.session;
        var donnees = data.data;
        var nom_sport = data.nom_sport;
        
        // Vérifier si la session a déjà été créée dans resultat_eleve
        if (!resultat_eleve.hasOwnProperty(session)) {
          resultat_eleve[session] = [];
        }

        //checker si le resultat existe deja
        var existe = false;

        console.log(nom_sport);
        for(var i = 0; i < resultat_eleve[session].length; i++){
          if(nom_sport == "Course"){
            if(resultat_eleve[session][i].nom == donnees.nom && resultat_eleve[session][i].prenom == donnees.prenom && resultat_eleve[session][i].classe == donnees.classe &&resultat_eleve[session][i].temps == donnees.temps && resultat_eleve[session][i].distance == donnees.distance&& resultat_eleve[session][i].freq_card == donnees.freq_card&& resultat_eleve[session][i].complementaire == donnees.complementaire){
              existe = true;
            }
          }
          else if (nom_sport == "Natation"){
            if(resultat_eleve[session][i].nom == donnees.nom && resultat_eleve[session][i].prenom == donnees.prenom && resultat_eleve[session][i].classe == donnees.classe &&resultat_eleve[session][i].temps == donnees.temps && resultat_eleve[session][i].distance == donnees.distance&& resultat_eleve[session][i].style_nage == donnees.style_nage&& resultat_eleve[session][i].complementaire == donnees.complementaire && resultat_eleve[session][i].nbPlongeons == donnees.nbPlongeons && resultat_eleve[session][i].nom_bassin == donnees.nom_bassin){
              existe = true;
            }
          }
          else if (nom_sport == "Step"){
            if(resultat_eleve[session][i].nom == donnees.nom && resultat_eleve[session][i].prenom == donnees.prenom && resultat_eleve[session][i].classe == donnees.classe && resultat_eleve[session][i].temps == donnees.temps && resultat_eleve[session][i].type_mobilite == donnees.type_mobilite && resultat_eleve[session][i].freq_cardiaque == donnees.freq_cardiaque && resultat_eleve[session][i].paramIndv == donnees.paramIndv&& resultat_eleve[session][i].ressenti == donnees.ressenti&& resultat_eleve[session][i].bilanPerso == donnees.bilanPerso&& resultat_eleve[session][i].perspective == donnees.perspective){
              existe = true;
            }
          }
          else if (nom_sport == "Musculation"){
            if(resultat_eleve[session][i].nom == donnees.nom && resultat_eleve[session][i].prenom == donnees.prenom && resultat_eleve[session][i].classe == donnees.classe && resultat_eleve[session][i].nom_muscle == donnees.nom_muscle && resultat_eleve[session][i].nb_series == donnees.nb_series && resultat_eleve[session][i].nb_repetitions == donnees.nb_repetitions && resultat_eleve[session][i].intensite == donnees.intensite && resultat_eleve[session][i].poids == donnees.poids && resultat_eleve[session][i].temps_pause == donnees.temps_pause && resultat_eleve[session][i].ressenti == donnees.ressenti){
              existe = true;
            }
          }
          else if (nom_sport == "Acrosport"){
            if(resultat_eleve[session][i].nom == donnees.nom && resultat_eleve[session][i].prenom == donnees.prenom && resultat_eleve[session][i].classe == donnees.classe && resultat_eleve[session][i].total_point == donnees.total_point){
              existe = true;
            }
          }
          else if (nom_sport == "Escalade"){
            if(resultat_eleve[session][i].nom == donnees.nom && resultat_eleve[session][i].prenom == donnees.prenom && resultat_eleve[session][i].classe == donnees.classe && resultat_eleve[session][i].la_voie == donnees.la_voie && resultat_eleve[session][i].deg_diffi == donnees.deg_diffi && resultat_eleve[session][i].assureur == donnees.assureur && resultat_eleve[session][i].temps == donnees.temps && resultat_eleve[session][i].complementaire == donnees.complementaire){
              existe = true;
            }
          }
        }
        if(!existe){
          // Ajouter les données à la liste correspondante
          resultat_eleve[session].push(donnees);
        }
        
        // Envoyer les données aux clients connectés
        wssProfesseur.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'resultat_eleve',
              session: session,
              data: resultat_eleve[session]
            };
            client.send(JSON.stringify(message));
          }
        });
        
      }
      else if(data.type == 'getTabEquipe'){
        var session = data.session;
        console.log('Envoi des données des equipes');

        wssEleve.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'equipes',
              session:session,
              data: equipes[session]
            };
            client.send(JSON.stringify(message));
          }
        });
        wssProfesseur.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'equipes',
              session:session,
              data: equipes[session]
            };
            client.send(JSON.stringify(message));
          }
        });
      }

      else if(data.type == 'getTabEleve'){
        var session = data.session;
        console.log('Envoi des données des élèves');
        //envoie les données a tous les clients
        wssEleve.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'eleves',
              session:session,
              data: eleves[session]
            };
            client.send(JSON.stringify(message));
          }
        });
        wssProfesseur.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'eleves',
              session:session,
              data: eleves[session]
            };
            client.send(JSON.stringify(message));
          }
        });
      }
      else if(data.type == 'getClassement'){
        id_session = data.session;
        //envoie les données a tous les clients
        wssEleve.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'classement',
              session:id_session,
              data: classement[id_session]
            };
            client.send(JSON.stringify(message));
          }
        });
        wssProfesseur.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'classement',
              session:id_session,
              data: classement[id_session]
            };
            client.send(JSON.stringify(message));
          }
        });
      }
      else if(data.type == 'classement'){
        id_session = data.session;
        classement[id_session] = data.classement;

        wssEleve.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'classement',
              session:id_session,
              data: classement[id_session]
            };
            client.send(JSON.stringify(message));
          }
        });
        wssProfesseur.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'classement',
              session:id_session,
              data: classement[id_session]
            };
            client.send(JSON.stringify(message));
          }
        });
        console.log('Données stockées:')
        console.log(data.classement);
      }
    } catch (error) {
      console.error('Erreur lors de l\'analyse JSON:', error.message);
      return;
    }
  });
});


wssProfesseur.on('connection', function connection(ws) {
  console.log('Connection professeur');
  ws.send('Bienvenue nouveau client');
  
  // Gérer les messages reçus
  ws.on('message', function incoming(message) {

    var data = JSON.parse(message);

    try {
      
      if(data.type == 'getTabEleve'){
        var session = data.session;
        console.log('Envoi des données des élèves');
        //envoie les données a tous les clients
        wssProfesseur.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'eleves',
              session:session,
              data: eleves[session]
            };
            client.send(JSON.stringify(message));
          }
        });
      }
      else if(data.type == 'getTabEquipe'){
        var session = data.session;
        console.log('Envoi des données des equipes');

        wssProfesseur.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'equipes',
              session:session,
              data: equipes[session]
            };
            client.send(JSON.stringify(message));
          }
        });
      }
      else if(data.type == 'getClassement'){
        id_session = data.session;
        //envoie les données a tous les clients
        wssProfesseur.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'classement',
              session:id_session,
              data: classement[id_session]
            };
            client.send(JSON.stringify(message));
          }
        });
      }
      else if(data.type == 'getResultat'){
        id_session = data.session;
        console.log('Envoi des données des résultats');
        console.log(resultat_eleve[id_session]);

        wssProfesseur.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'resultat_eleve',
              session:id_session,
              data: resultat_eleve[id_session]
            };
            client.send(JSON.stringify(message));
          }
        });
      }
      else if(data.type == 'equipe_session'){
        const equipe = data.equipe;
        const session = data.session;

         // Vérifier si la session a déjà été créée dans resultat_eleve
         if (!equipes.hasOwnProperty(session)) {
          equipes[session] = [];
        }

        var trouver = false;
        for(var i = 0; i < equipes[session].length; i++){
          if(equipes[session][i] == equipe){
            trouver = true;
          }
        }
        if(!trouver){    
          // Ajouter les données à la liste correspondante
          equipes[session].push(equipe);
        }

        console.log('Données stockées:');
        console.log(equipes);

        //envoie les données a tous les clients
        wssEleve.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'equipes',
              session:session,
              data: equipes[session]
            };
            client.send(JSON.stringify(message));
          }
        });
        wssProfesseur.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            let message = {
              type: 'equipes',
              session:session,
              data: equipes[session]
            };
            client.send(JSON.stringify(message));
          }
        }
        );
      }
    }
    catch (error) {
      console.error('Erreur lors de l\'analyse JSON:', error.message);
      return;
    }
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
