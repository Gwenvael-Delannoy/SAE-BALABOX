/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-webapp:server');
var http = require('http');
var Websocket = require('ws');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,() => console.log('Listening on port : 3000'));
server.on('error', onError);
server.on('listening', onListening);

const wssEleve = new Websocket.Server({ port: 3001 });
const wssProfesseur = new Websocket.Server({ port: 3002 });

var eleves = []; // tableau global pour stocker les informations des élèves
var resultats_eleves = []; // tableau global pour stocker les résultats des élèves

wssEleve.on('connection', function connection(ws) {
  console.log('Connection eleve');
  ws.send('Bienvenue nouveau client');

  // Gérer les messages reçus
  ws.on('message', function incoming(message) {
    try {
      var data = JSON.parse(message);
      console.log('Données reçues:');
      console.log(data);
       
      if(data.type == 'info_eleve'){
        eleves.push(data);
        console.log('Données stockées:');
        console.log(eleves);

        //envoie les données a tous les clients
        wssEleve.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            client.send(JSON.stringify(eleves));
          }
        });
      }
      else if(data.type == 'getTabEleve'){
        console.log('Envoi des données des élèves');
        ws.send(JSON.stringify(eleves));
      }
      else if(data.type == 'getTabResultat'){
        console.log('Envoi des données des résultats');
        ws.send(JSON.stringify(resultats_eleves));
      }
    } catch (error) {
      console.error('Erreur lors de l\'analyse JSON:', error.message);
      return;
    }
  });
});


wssProfesseur.on('connection', function connection(ws) {
  console.log('Connection professeur');
  ws.send('Bienvenue nouveau client');
  
  // Gérer les messages reçus
  ws.on('message', function incoming(message) {
    try {
      var data = JSON.parse(message);
      if(data.type == 'resultat'){
        resultats_eleve.push(data.data);
        console.log('Données stockées:');
        console.log(resultats_eleve);
        //envoie les données a tous les clients
        wssProfesseur.clients.forEach(function each(client) {
          if (client.readyState === Websocket.OPEN) {
            client.send(resultats_eleve);
          }
        });
      }
    }
    catch (error) {
      console.error('Erreur lors de l\'analyse JSON:', error.message);
      return;
    }
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
